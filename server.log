
> qloo-agent-app@0.1.0 dev
> next dev --turbopack

   ‚ñ≤ Next.js 15.4.5 (Turbopack)
   - Local:        http://localhost:3000
   - Network:      http://192.168.1.253:3000
   - Environments: .env.local, .env

 ‚úì Starting...
 ‚úì Ready in 1120ms
 ‚óã Compiling / ...
 ‚úì Compiled / in 2.7s
 GET / 200 in 2916ms
 GET / 200 in 102ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
 GET /api/token-usage 200 in 483ms
prisma:info Starting a sqlite pool with 21 connections.
 ‚óã Compiling /api/token-usage ...
 ‚úì Compiled /api/token-usage in 500ms
prisma:query SELECT `main`.`global_token_usage`.`id`, `main`.`global_token_usage`.`totalPromptTokens`, `main`.`global_token_usage`.`totalCompletionTokens`, `main`.`global_token_usage`.`totalTokens`, `main`.`global_token_usage`.`sessionTokens`, `main`.`global_token_usage`.`lastUpdated`, `main`.`global_token_usage`.`costEstimate` FROM `main`.`global_token_usage` WHERE `main`.`global_token_usage`.`id` IN (?,?) LIMIT ? OFFSET ?
 GET /favicon.ico?favicon.45db1c09.ico 200 in 602ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 608ms
 GET / 200 in 76ms
 GET /api/token-usage 200 in 31ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 39ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 247ms
prisma:query SELECT 1
prisma:query INSERT INTO `main`.`chat_sessions` (`id`, `createdAt`, `updatedAt`, `debugMode`) VALUES (?,?,?,?) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
üéØ Creating persona with data: {
  name: 'Mizo',
  age: '33',
  city: 'Krakow',
  bio: 'A fashion-forward individual who stays ahead of trends, loves shopping, and has a keen eye for style. Enjoys beauty products, luxury brands, and personal care.'
}
üîç createPersona called with sessionId: cmdsto2pa0000sbrvgol1qbu7
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
üîç Creating persona...
prisma:query INSERT INTO `main`.`personas` (`id`, `sessionId`, `name`, `location`, `demographics`, `confidence`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
üéØ Processing persona data through chat: Hi, I'm Mizo, I'm 33 years old and I live in Krakow. A fashion-forward individual who stays ahead of trends, loves shopping, and has a keen eye for style. Enjoys beauty products, luxury brands, and personal care.
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Processing persona data directly...
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
Failed to parse interest extraction JSON: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:200:40)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async POST (src/app/api/sessions/route.ts:86:39)
  198 |       try {
  199 |         // First try to parse as-is
> 200 |         const extractedInterests = JSON.parse(jsonText);
      |                                        ^
  201 |         return extractedInterests;
  202 |       } catch (parseError) {
  203 |         console.error('Failed to parse interest extraction JSON:', parseError);
Raw response: 
Failed to fix JSON parsing: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:223:42)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async POST (src/app/api/sessions/route.ts:86:39)
  221 |           }
  222 |           
> 223 |           const extractedInterests = JSON.parse(jsonText);
      |                                          ^
  224 |           console.log('‚úÖ Fixed JSON parsing successfully');
  225 |           return extractedInterests;
  226 |         } catch (secondParseError) {
Attempted to fix JSON: 
‚ÑπÔ∏è No new interests to store
üéØ Extracted interests from persona data: 0
prisma:query UPDATE `main`.`personas` SET `confidence` = ?, `updatedAt` = ? WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
‚úÖ Persona confidence updated to: 0.5
‚úÖ Persona data processed through chat successfully
‚úÖ Persona created successfully
 POST /api/sessions 200 in 4532ms
 ‚úì Compiled /api/sessions/[sessionId] in 157ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/sessions/undefined 404 in 615ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
 GET / 200 in 57ms
 GET /api/token-usage 200 in 27ms
prisma:query SELECT 1
prisma:query SELECT `main`.`global_token_usage`.`id`, `main`.`global_token_usage`.`totalPromptTokens`, `main`.`global_token_usage`.`totalCompletionTokens`, `main`.`global_token_usage`.`totalTokens`, `main`.`global_token_usage`.`sessionTokens`, `main`.`global_token_usage`.`lastUpdated`, `main`.`global_token_usage`.`costEstimate` FROM `main`.`global_token_usage` WHERE (`main`.`global_token_usage`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 35ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 228ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsto2pa0000sbrvgol1qbu7 200 in 27ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` = ? ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` = ? ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/qloo-responses?sessionId=cmdsto2pa0000sbrvgol1qbu7 200 in 207ms
 ‚úì Compiled /api/persona in 213ms
üîç Persona API called with sessionId: cmdsto2pa0000sbrvgol1qbu7
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdsto2pa0000sbrvgol1qbu7
üîç getPersona called with sessionId: cmdsto2pa0000sbrvgol1qbu7
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
 GET /api/persona?sessionId=cmdsto2pa0000sbrvgol1qbu7 200 in 280ms
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` = ? ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` = ? ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/qloo-responses?sessionId=cmdsto2pa0000sbrvgol1qbu7 200 in 79ms
üîç Persona API called with sessionId: cmdsto2pa0000sbrvgol1qbu7
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdsto2pa0000sbrvgol1qbu7
üîç getPersona called with sessionId: cmdsto2pa0000sbrvgol1qbu7
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/persona?sessionId=cmdsto2pa0000sbrvgol1qbu7 200 in 46ms
 ‚úì Compiled /api/chat/messages in 86ms
üîç Get Messages API: Fetching messages for session cmdsto2pa0000sbrvgol1qbu7
prisma:query SELECT 1
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`sessionId`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` = ? ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
 GET /api/chat/messages?sessionId=cmdsto2pa0000sbrvgol1qbu7 200 in 112ms
 ‚úì Compiled /api/persona/update in 85ms
üîç Persona Update API: Processing 1 messages for session cmdsto2pa0000sbrvgol1qbu7
üîç Smart Persona Agent: Processing 1 messages for session cmdsto2pa0000sbrvgol1qbu7
üîç Smart Persona Agent: Extracting persona from messages
üîç Smart Persona Agent: Processing 5 interests
üîç Calling Qloo Entity Search API with parameters: { query: 'Fashion', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 1536 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Fashion', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Calling Qloo Entity Search API with parameters: { query: 'Shopping', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 319 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Shopping', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Calling Qloo Entity Search API with parameters: { query: 'Luxury brands', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 418 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Luxury brands', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Calling Qloo Entity Search API with parameters: { query: 'Beauty products', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 348 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Beauty products', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Calling Qloo Entity Search API with parameters: { query: 'Personal care', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 411 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Personal care', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Smart Persona Agent: Updating persona with 5 interests, 5 QLOO entities
prisma:query UPDATE `main`.`personas` SET `name` = ?, `location` = ?, `gender` = ?, `demographics` = ?, `updatedAt` = ? WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
‚úÖ Smart Persona Agent updated persona for session cmdsto2pa0000sbrvgol1qbu7
üìä Extracted: 5 interests, 5 QLOO entities
üîç getPersona called with sessionId: cmdsto2pa0000sbrvgol1qbu7
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` = ? ORDER BY `main`.`audience_characteristics`.`createdAt` DESC LIMIT ? OFFSET ?
 POST /api/persona/update 200 in 7097ms
üîç Persona API called with sessionId: cmdsto2pa0000sbrvgol1qbu7
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdsto2pa0000sbrvgol1qbu7
üîç getPersona called with sessionId: cmdsto2pa0000sbrvgol1qbu7
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/persona?sessionId=cmdsto2pa0000sbrvgol1qbu7 200 in 30ms
 GET / 200 in 73ms
 GET /api/token-usage 200 in 114ms
prisma:query SELECT 1
prisma:query SELECT `main`.`global_token_usage`.`id`, `main`.`global_token_usage`.`totalPromptTokens`, `main`.`global_token_usage`.`totalCompletionTokens`, `main`.`global_token_usage`.`totalTokens`, `main`.`global_token_usage`.`sessionTokens`, `main`.`global_token_usage`.`lastUpdated`, `main`.`global_token_usage`.`costEstimate` FROM `main`.`global_token_usage` WHERE (`main`.`global_token_usage`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 126ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsto2pa0000sbrvgol1qbu7 200 in 23ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query DELETE FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
 DELETE /api/sessions/cmdsto2pa0000sbrvgol1qbu7 200 in 26ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 20ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query SELECT 1
prisma:query INSERT INTO `main`.`chat_sessions` (`id`, `createdAt`, `updatedAt`, `debugMode`) VALUES (?,?,?,?) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
üéØ Creating persona with data: {
  name: 'mizo',
  age: '22',
  city: 'Krakow',
  bio: "A music lover who's always discovering new artists, attending concerts, and exploring different genres. Enjoys vinyl records, live performances, and music festivals."
}
üîç createPersona called with sessionId: cmdstqwot000fsbrv57hc6qs9
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
üîç Creating persona...
prisma:query INSERT INTO `main`.`personas` (`id`, `sessionId`, `name`, `location`, `demographics`, `confidence`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
üéØ Processing persona data through chat: Hi, I'm mizo, I'm 22 years old and I live in Krakow. A music lover who's always discovering new artists, attending concerts, and exploring different genres. Enjoys vinyl records, live performances, and music festivals.
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Processing persona data directly...
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
 GET /api/token-usage 200 in 52ms
 GET /api/sessions 200 in 53ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 ‚úì Compiled in 120ms
Failed to parse interest extraction JSON: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:200:40)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async POST (src/app/api/sessions/route.ts:86:39)
  198 |       try {
  199 |         // First try to parse as-is
> 200 |         const extractedInterests = JSON.parse(jsonText);
      |                                        ^
  201 |         return extractedInterests;
  202 |       } catch (parseError) {
  203 |         console.error('Failed to parse interest extraction JSON:', parseError);
Raw response: 
Failed to fix JSON parsing: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:223:42)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async POST (src/app/api/sessions/route.ts:86:39)
  221 |           }
  222 |           
> 223 |           const extractedInterests = JSON.parse(jsonText);
      |                                          ^
  224 |           console.log('‚úÖ Fixed JSON parsing successfully');
  225 |           return extractedInterests;
  226 |         } catch (secondParseError) {
Attempted to fix JSON: 
‚ÑπÔ∏è No new interests to store
üéØ Extracted interests from persona data: 0
prisma:query UPDATE `main`.`personas` SET `confidence` = ?, `updatedAt` = ? WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
‚úÖ Persona confidence updated to: 0.5
‚úÖ Persona data processed through chat successfully
‚úÖ Persona created successfully
 POST /api/sessions 200 in 4959ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/sessions/undefined 404 in 23ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
 ‚úì Compiled in 60ms
 ‚úì Compiled in 57ms
 ‚úì Compiled in 51ms
prisma:query SELECT 1
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdstqwot000fsbrv57hc6qs9 200 in 26ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsnisrf00bhsbeta9xhe1hu 200 in 40ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
 ‚úì Compiled in 100ms
 ‚úì Compiled / in 31ms
 GET / 200 in 173ms
 ‚úì Compiled in 92ms
prisma:query SELECT 1
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdstqwot000fsbrv57hc6qs9 200 in 35ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
 ‚úì Compiled /api/chat in 156ms
üöÄ POST /api/chat - Starting request processing
‚úÖ Configuration validation passed
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`sessionId`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`sessionId`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`source` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
üìù Using existing chat session: cmdstqwot000fsbrv57hc6qs9
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Starting agent processing with timeout...
üéØ Setting session ID in agents: cmdstqwot000fsbrv57hc6qs9
üîç getPersona called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
üîç getPersona called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîß Step: query-analysis { query: 'recommend me restaurant', status: 'starting' }
üéØ Using rule-based intent analysis for: recommend me restaurant
üéØ Rule-based analysis: {
  query: 'recommend me restaurant',
  hasQlooKeywords: true,
  hasGeneralKeywords: false,
  hasHistoryKeywords: false,
  qlooKeywordsFound: [ 'recommend', 'restaurant' ],
  historyKeywordsFound: []
}
üéØ Intent analysis result: { shouldUseQloo: true, intent: 'recommendation', confidence: 0.8 }
üîß Step: query-analysis {
  query: 'recommend me restaurant',
  status: 'completed',
  intent: { shouldUseQloo: true, intent: 'recommendation', confidence: 0.8 },
  shouldUseQloo: true
}
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
Failed to parse interest extraction JSON: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:200:40)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async MainAgent.processQuery (src/lib/agents/main-agent.ts:131:37)
    at async POST (src/app/api/chat/route.ts:128:21)
  198 |       try {
  199 |         // First try to parse as-is
> 200 |         const extractedInterests = JSON.parse(jsonText);
      |                                        ^
  201 |         return extractedInterests;
  202 |       } catch (parseError) {
  203 |         console.error('Failed to parse interest extraction JSON:', parseError);
Raw response: 
Failed to fix JSON parsing: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:223:42)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async MainAgent.processQuery (src/lib/agents/main-agent.ts:131:37)
    at async POST (src/app/api/chat/route.ts:128:21)
  221 |           }
  222 |           
> 223 |           const extractedInterests = JSON.parse(jsonText);
      |                                          ^
  224 |           console.log('‚úÖ Fixed JSON parsing successfully');
  225 |           return extractedInterests;
  226 |         } catch (secondParseError) {
Attempted to fix JSON: 
‚ÑπÔ∏è No new interests to store
üéØ Extracted 0 interests from conversation
üéØ Routing to response generator. shouldUseQloo: true intent: recommendation
üéØ Taking Qloo path
üéØ generateQlooResponse called with: {
  userQuery: 'recommend me restaurant',
  intent: { shouldUseQloo: true, intent: 'recommendation', confidence: 0.8 }
}
üîç getPersona called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîç Using Insights API with entity resolution and persona workflow
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
Failed to parse interest extraction JSON: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:200:40)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async QlooAgent.extractParameters (src/lib/agents/qloo-agent.ts:86:35)
    at async MainAgent.generateQlooResponse (src/lib/agents/main-agent.ts:316:31)
    at async MainAgent.processQuery (src/lib/agents/main-agent.ts:153:15)
    at async POST (src/app/api/chat/route.ts:128:21)
  198 |       try {
  199 |         // First try to parse as-is
> 200 |         const extractedInterests = JSON.parse(jsonText);
      |                                        ^
  201 |         return extractedInterests;
  202 |       } catch (parseError) {
  203 |         console.error('Failed to parse interest extraction JSON:', parseError);
Raw response: 
Failed to fix JSON parsing: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:223:42)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async QlooAgent.extractParameters (src/lib/agents/qloo-agent.ts:86:35)
    at async MainAgent.generateQlooResponse (src/lib/agents/main-agent.ts:316:31)
    at async MainAgent.processQuery (src/lib/agents/main-agent.ts:153:15)
    at async POST (src/app/api/chat/route.ts:128:21)
  221 |           }
  222 |           
> 223 |           const extractedInterests = JSON.parse(jsonText);
      |                                          ^
  224 |           console.log('‚úÖ Fixed JSON parsing successfully');
  225 |           return extractedInterests;
  226 |         } catch (secondParseError) {
Attempted to fix JSON: 
‚ÑπÔ∏è No new interests to store
üéØ Generating signals from interests: []
üéØ Target entity type: urn:entity:place
‚ÑπÔ∏è No interests found, returning empty signals
üéØ Persona signals for recommendations: { entitySignals: [], audienceSignals: [], tagSignals: [] }
prisma:query SELECT 1
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Parameter evaluation failed: AI parsing error, using fallback evaluation
‚ö†Ô∏è Parameter evaluation failed: AI parsing error, using fallback evaluation
‚ö†Ô∏è Parameter evaluation failed: AI parsing error, using fallback evaluation
‚ö†Ô∏è Parameter evaluation failed: AI parsing error, using fallback evaluation
‚ö†Ô∏è Parameter evaluation failed: AI parsing error, using fallback evaluation
‚ö†Ô∏è Parameter evaluation failed: AI parsing error, using fallback evaluation
üéØ Parameter extraction result: {
  parameters: {
    query: 'recommend me restaurant',
    entityType: 'urn:entity:place',
    location: undefined,
    targetAPI: 'GETINSIGHTS',
    limit: 3,
    explainability: true,
    filterTags: undefined
  },
  confidence: 0.8,
  reasoning: 'Enhanced with 0 persona signals and 0 new interests',
  extractedFields: [
    'query',
    'entityType',
    'location',
    'targetAPI',
    'limit',
    'explainability',
    'filterTags'
  ]
}
üéØ About to generate persona signals for entity type: urn:entity:place
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
üéØ Generating signals from interests: []
üéØ Target entity type: urn:entity:place
‚ÑπÔ∏è No interests found, returning empty signals
üéØ Using persona signals for recommendations: { entitySignals: [], audienceSignals: [], tagSignals: [] }
üéØ Entity type for signals: urn:entity:place
‚ö†Ô∏è No persona signals available, using entity search
üîç Calling Qloo Entity Search API with parameters: {
  query: 'recommend me restaurant',
  entityType: 'urn:entity:place',
  location: undefined,
  targetAPI: 'GETINSIGHTS',
  limit: 3,
  explainability: true,
  filterTags: undefined
}
üîç Parser debug: {
  hasResponse: true,
  hasResults: true,
  hasData: false,
  hasDataResults: false,
  hasDataEntities: false,
  isResultsArray: false,
  hasResultsEntities: false,
  isResultsArrayDirect: true,
  entityCount: 3,
  responseKeys: [ 'results' ],
  dataKeys: [],
  resultsKeys: [ '0', '1', '2' ]
}
üîç First entity structure: {
  keys: [
    'name',
    'entity_id',
    'types',
    'properties',
    'popularity',
    'location',
    'tags',
    'disambiguation'
  ],
  type: undefined,
  entity_type: undefined,
  entityType: undefined,
  hasProperties: true,
  propertiesKeys: [
    'akas',            'address',
    'business_rating', 'description',
    'external',        'geocode',
    'hours',           'image',
    'is_closed',       'neighborhood',
    'phone',           'price_level',
    'website',         'specialty_dishes',
    'good_for'
  ],
  properties: {
    akas: [ [Object] ],
    address: '20 Custom House Wharf Portland, ME 04101',
    business_rating: 4.3,
    description: 'Raw & fried seafood plus drinks in a vintage diner interior or on a wharfside deck with live music.',
    external: {},
    geocode: {
      name: 'Old Port',
      city: 'Portland',
      admin1_region: 'Cumberland',
      admin2_region: 'Maine',
      country_code: 'US',
      country: 'United States'
    },
    hours: {
      Monday: [Array],
      Tuesday: [Array],
      Wednesday: [Array],
      Thursday: [Array],
      Friday: [Array],
      Saturday: [Array],
      Sunday: [Array]
    },
    image: {
      url: 'https://images.qloo.com/i/8DDA6A66-DBAA-4478-812B-49DE407A3F68-420x-auto.jpg'
    },
    is_closed: false,
    neighborhood: 'Old Port',
    phone: '+12077734653',
    price_level: 2,
    website: 'https://portholemaine.com/',
    specialty_dishes: [ [Object], [Object], [Object] ],
    good_for: [ [Object], [Object], [Object] ]
  }
}
üîç Parser result: {
  originalCount: 3,
  parsedCount: 3,
  finalEntityCount: 3,
  responseSize: 37174,
  parsingLevel: 'tiny',
  entityNames: [
    'The Porthole Restaurant & Pub',
    'Restaurant No Me Olvides',
    'B·∫øp M·∫π ·ªàn - Vietnamese Restaurant'
  ]
}
üìè Medium response detected, using tiny parsing: 37174 bytes
üîç Attempting to log API call for session: cmdstqwot000fsbrv57hc6qs9
prisma:query INSERT INTO `main`.`api_calls` (`id`, `sessionId`, `endpoint`, `method`, `parameters`, `response`, `status`, `duration`, `timestamp`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `endpoint` AS `endpoint`, `method` AS `method`, `parameters` AS `parameters`, `response` AS `response`, `status` AS `status`, `duration` AS `duration`, `timestamp` AS `timestamp`, `error` AS `error`
üíæ Logged complete raw Qloo response to database
‚úÖ Entity Search API response received in 2594 ms
üíæ Storing 3 entities from entity-search
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE (`main`.`entities`.`sessionId` = ? AND `main`.`entities`.`qlooId` = ?) LIMIT ? OFFSET ?
prisma:query INSERT INTO `main`.`entities` (`id`, `sessionId`, `qlooId`, `name`, `type`, `description`, `metadata`, `confidence`, `source`, `timestamp`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `qlooId` AS `qlooId`, `name` AS `name`, `type` AS `type`, `subtype` AS `subtype`, `description` AS `description`, `metadata` AS `metadata`, `tags` AS `tags`, `location` AS `location`, `confidence` AS `confidence`, `source` AS `source`, `timestamp` AS `timestamp`
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE (`main`.`entities`.`sessionId` = ? AND `main`.`entities`.`qlooId` = ?) LIMIT ? OFFSET ?
prisma:query INSERT INTO `main`.`entities` (`id`, `sessionId`, `qlooId`, `name`, `type`, `metadata`, `confidence`, `source`, `timestamp`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `qlooId` AS `qlooId`, `name` AS `name`, `type` AS `type`, `subtype` AS `subtype`, `description` AS `description`, `metadata` AS `metadata`, `tags` AS `tags`, `location` AS `location`, `confidence` AS `confidence`, `source` AS `source`, `timestamp` AS `timestamp`
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE (`main`.`entities`.`sessionId` = ? AND `main`.`entities`.`qlooId` = ?) LIMIT ? OFFSET ?
prisma:query INSERT INTO `main`.`entities` (`id`, `sessionId`, `qlooId`, `name`, `type`, `metadata`, `confidence`, `source`, `timestamp`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `qlooId` AS `qlooId`, `name` AS `name`, `type` AS `type`, `subtype` AS `subtype`, `description` AS `description`, `metadata` AS `metadata`, `tags` AS `tags`, `location` AS `location`, `confidence` AS `confidence`, `source` AS `source`, `timestamp` AS `timestamp`
‚úÖ Stored 3 entities for session cmdstqwot000fsbrv57hc6qs9
‚úÖ Stored 3 entities from search
‚úÖ Entity search successful
üîç About to parse Qloo response with structure: {
  hasData: true,
  dataKeys: [ 'entities', 'metadata' ],
  hasResults: false,
  resultsKeys: [],
  hasEntities: false,
  entityCount: 0
}
üîç Raw API response keys: [ 'success', 'data', 'metadata' ]
üîç API response.data keys: [ 'entities', 'metadata' ]
üîç API response.data.results keys: no results
üîç API response.data.results.entities count: 0
üîç Parser debug: {
  hasResponse: true,
  hasResults: false,
  hasData: true,
  hasDataResults: false,
  hasDataEntities: true,
  isResultsArray: false,
  hasResultsEntities: false,
  isResultsArrayDirect: false,
  entityCount: 3,
  responseKeys: [ 'success', 'data', 'metadata' ],
  dataKeys: [ 'entities', 'metadata' ],
  resultsKeys: []
}
üîç First entity structure: {
  keys: [
    'id',         'name',
    'type',       'subtype',
    'entityType', 'imageUrl',
    'properties', 'description',
    'score'
  ],
  type: 'urn:entity:place',
  entity_type: undefined,
  entityType: 'urn:entity:place',
  hasProperties: true,
  propertiesKeys: [
    'description',      'address',
    'phone',            'website',
    'rating',           'price_range',
    'cuisine',          'genre',
    'director',         'release_year',
    'runtime',          'cast',
    'filming_location', 'production_companies',
    'release_country',  'short_descriptions',
    'akas',             'business_rating',
    'external',         'geocode',
    'hours',            'image',
    'is_closed',        'neighborhood',
    'price_level',      'specialty_dishes',
    'good_for'
  ],
  properties: {
    description: 'Raw & fried seafood plus drinks in a vintage diner interior or on a wharfside deck with live music.',
    address: '20 Custom House Wharf Portland, ME 04101',
    phone: '+12077734653',
    website: 'https://portholemaine.com/',
    rating: undefined,
    price_range: undefined,
    cuisine: undefined,
    genre: undefined,
    director: undefined,
    release_year: undefined,
    runtime: undefined,
    cast: undefined,
    filming_location: undefined,
    production_companies: undefined,
    release_country: undefined,
    short_descriptions: undefined,
    akas: [ [Object] ],
    business_rating: 4.3,
    external: {},
    geocode: {
      name: 'Old Port',
      city: 'Portland',
      admin1_region: 'Cumberland',
      admin2_region: 'Maine',
      country_code: 'US',
      country: 'United States'
    },
    hours: {
      Monday: [Array],
      Tuesday: [Array],
      Wednesday: [Array],
      Thursday: [Array],
      Friday: [Array],
      Saturday: [Array],
      Sunday: [Array]
    },
    image: {
      url: 'https://images.qloo.com/i/8DDA6A66-DBAA-4478-812B-49DE407A3F68-420x-auto.jpg'
    },
    is_closed: false,
    neighborhood: 'Old Port',
    price_level: 2,
    specialty_dishes: [ [Object], [Object], [Object] ],
    good_for: [ [Object], [Object], [Object] ]
  }
}
üîç Parser result: {
  originalCount: 3,
  parsedCount: 3,
  finalEntityCount: 3,
  responseSize: 5645,
  parsingLevel: 'summary',
  entityNames: [
    'The Porthole Restaurant & Pub',
    'Restaurant No Me Olvides',
    'B·∫øp M·∫π ·ªàn - Vietnamese Restaurant'
  ]
}
üìä Parsed response structure: {
  entityCount: 3,
  hasEntities: true,
  metadata: {
    parsingLevel: 'summary',
    originalCount: 3,
    parsedCount: 3,
    tokenSavings: 20
  }
}
‚úÖ Parsed entities found: [
  { name: 'The Porthole Restaurant & Pub', type: 'urn:entity:place' },
  { name: 'Restaurant No Me Olvides', type: 'urn:entity:place' },
  {
    name: 'B·∫øp M·∫π ·ªàn - Vietnamese Restaurant',
    type: 'urn:entity:place'
  }
]
üîç Checking parsed response entities: 3
üîç Raw API response entities: 3
üîç Parsed response structure: {
  hasEntities: true,
  entityCount: 3,
  metadata: {
    parsingLevel: 'summary',
    originalCount: 3,
    parsedCount: 3,
    tokenSavings: 20
  }
}
‚úÖ Found recommendations from Qloo API
üíæ Storing 3 entities from insights-api
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE (`main`.`entities`.`sessionId` = ? AND `main`.`entities`.`qlooId` = ?) LIMIT ? OFFSET ?
prisma:query UPDATE `main`.`entities` SET `name` = ?, `type` = ?, `description` = ?, `metadata` = ?, `confidence` = ?, `source` = ?, `timestamp` = ? WHERE (`main`.`entities`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `qlooId` AS `qlooId`, `name` AS `name`, `type` AS `type`, `subtype` AS `subtype`, `description` AS `description`, `metadata` AS `metadata`, `tags` AS `tags`, `location` AS `location`, `confidence` AS `confidence`, `source` AS `source`, `timestamp` AS `timestamp`
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE (`main`.`entities`.`sessionId` = ? AND `main`.`entities`.`qlooId` = ?) LIMIT ? OFFSET ?
prisma:query UPDATE `main`.`entities` SET `name` = ?, `type` = ?, `metadata` = ?, `confidence` = ?, `source` = ?, `timestamp` = ? WHERE (`main`.`entities`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `qlooId` AS `qlooId`, `name` AS `name`, `type` AS `type`, `subtype` AS `subtype`, `description` AS `description`, `metadata` AS `metadata`, `tags` AS `tags`, `location` AS `location`, `confidence` AS `confidence`, `source` AS `source`, `timestamp` AS `timestamp`
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE (`main`.`entities`.`sessionId` = ? AND `main`.`entities`.`qlooId` = ?) LIMIT ? OFFSET ?
prisma:query UPDATE `main`.`entities` SET `name` = ?, `type` = ?, `metadata` = ?, `confidence` = ?, `source` = ?, `timestamp` = ? WHERE (`main`.`entities`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `qlooId` AS `qlooId`, `name` AS `name`, `type` AS `type`, `subtype` AS `subtype`, `description` AS `description`, `metadata` AS `metadata`, `tags` AS `tags`, `location` AS `location`, `confidence` AS `confidence`, `source` AS `source`, `timestamp` AS `timestamp`
‚úÖ Stored 3 entities for session cmdstqwot000fsbrv57hc6qs9
üíæ Stored full entity data in database
üéØ Storing response metadata with entities: {
  entityCount: 3,
  entityNames: [
    'The Porthole Restaurant & Pub',
    'Restaurant No Me Olvides',
    'B·∫øp M·∫π ·ªàn - Vietnamese Restaurant'
  ],
  intent: 'recommendation',
  source: 'qloo-insights'
}
üéØ Generating personalized response with entities: 3
‚úÖ Agent processing completed
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
 POST /api/chat 200 in 12904ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdstqwot000fsbrv57hc6qs9 200 in 25ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query SELECT 1
üîç Persona API called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç getPersona called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` = ? ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` = ? ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT 1
 GET /api/qloo-responses?sessionId=cmdstqwot000fsbrv57hc6qs9 200 in 44ms
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/persona?sessionId=cmdstqwot000fsbrv57hc6qs9 200 in 51ms
üîç Persona API called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç getPersona called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` = ? ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
 GET /api/qloo-responses?sessionId=cmdstqwot000fsbrv57hc6qs9 200 in 30ms
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` = ? ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/persona?sessionId=cmdstqwot000fsbrv57hc6qs9 200 in 28ms
üîç Persona API called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç getPersona called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/persona?sessionId=cmdstqwot000fsbrv57hc6qs9 200 in 23ms
üîç Get Messages API: Fetching messages for session cmdstqwot000fsbrv57hc6qs9
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`sessionId`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` = ? ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
 GET /api/chat/messages?sessionId=cmdstqwot000fsbrv57hc6qs9 200 in 22ms
üîç Persona Update API: Processing 3 messages for session cmdstqwot000fsbrv57hc6qs9
üîç Smart Persona Agent: Processing 3 messages for session cmdstqwot000fsbrv57hc6qs9
üîç Smart Persona Agent: Extracting persona from messages
üîç Smart Persona Agent: Processing 5 interests
üîç Calling Qloo Entity Search API with parameters: { query: 'Music', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 710 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Music', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Calling Qloo Entity Search API with parameters: { query: 'Concerts', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 264 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Concerts', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Calling Qloo Entity Search API with parameters: { query: 'Music Festivals', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 410 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Music Festivals', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Calling Qloo Entity Search API with parameters: { query: 'Vinyl Records', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 583 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Vinyl Records', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Calling Qloo Entity Search API with parameters: { query: 'Restaurants', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 317 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Restaurants', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Smart Persona Agent: Updating persona with 5 interests, 5 QLOO entities
prisma:query UPDATE `main`.`personas` SET `name` = ?, `location` = ?, `gender` = ?, `demographics` = ?, `updatedAt` = ? WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
‚úÖ Smart Persona Agent updated persona for session cmdstqwot000fsbrv57hc6qs9
üìä Extracted: 5 interests, 5 QLOO entities
üîç getPersona called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` = ? ORDER BY `main`.`audience_characteristics`.`createdAt` DESC LIMIT ? OFFSET ?
 POST /api/persona/update 200 in 6867ms
üîç Persona API called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç getPersona called with sessionId: cmdstqwot000fsbrv57hc6qs9
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/persona?sessionId=cmdstqwot000fsbrv57hc6qs9 200 in 24ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
üéØ Creating persona with data: {
  name: 'Jo',
  age: '23',
  city: 'Berlin',
  bio: 'A wellness-focused person who prioritizes mental health, meditation, and holistic living. Enjoys yoga, organic food, and mindfulness practices.'
}
üîç createPersona called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
prisma:query SELECT 1
prisma:query INSERT INTO `main`.`chat_sessions` (`id`, `createdAt`, `updatedAt`, `debugMode`) VALUES (?,?,?,?) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
üîç Creating persona...
prisma:query INSERT INTO `main`.`personas` (`id`, `sessionId`, `name`, `location`, `demographics`, `confidence`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
üéØ Processing persona data through chat: Hi, I'm Jo, I'm 23 years old and I live in Berlin. A wellness-focused person who prioritizes mental health, meditation, and holistic living. Enjoys yoga, organic food, and mindfulness practices.
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Processing persona data directly...
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
Failed to parse interest extraction JSON: SyntaxError: Unterminated string in JSON at position 153 (line 6 column 72)
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:200:40)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async POST (src/app/api/sessions/route.ts:87:41)
  198 |       try {
  199 |         // First try to parse as-is
> 200 |         const extractedInterests = JSON.parse(jsonText);
      |                                        ^
  201 |         return extractedInterests;
  202 |       } catch (parseError) {
  203 |         console.error('Failed to parse interest extraction JSON:', parseError);
Raw response: ```json
[
  {
    "name": "Wellness",
    "category": "lifestyle",
    "confidence": 1.0,
    "context": "User describes themselves as a 'wellness-focused person
Failed to fix JSON parsing: SyntaxError: Unterminated string in JSON at position 155 (line 6 column 74)
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:223:42)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async POST (src/app/api/sessions/route.ts:87:41)
  221 |           }
  222 |           
> 223 |           const extractedInterests = JSON.parse(jsonText);
      |                                          ^
  224 |           console.log('‚úÖ Fixed JSON parsing successfully');
  225 |           return extractedInterests;
  226 |         } catch (secondParseError) {
Attempted to fix JSON: [
  {
    "name": "Wellness",
    "category": "lifestyle",
    "confidence": 1.0,
    "context": "User describes themselves as a 'wellness-focused person]}
‚ÑπÔ∏è No new interests to store
üéØ Extracted interests from persona data: 0
prisma:query UPDATE `main`.`personas` SET `confidence` = ?, `updatedAt` = ? WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
‚úÖ Persona confidence updated to: 0.5
‚úÖ Persona data processed through chat successfully
‚úÖ Persona created successfully
 POST /api/sessions 200 in 4585ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsua4sg0016sbrvnmrb8wlg 200 in 20ms
üîç Persona API called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
üîç getPersona called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
prisma:query SELECT 1
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` = ? ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` = ? ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/qloo-responses?sessionId=cmdsua4sg0016sbrvnmrb8wlg 200 in 27ms
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/persona?sessionId=cmdsua4sg0016sbrvnmrb8wlg 200 in 29ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
üîç Get Messages API: Fetching messages for session cmdsua4sg0016sbrvnmrb8wlg
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`sessionId`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` = ? ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
 GET /api/chat/messages?sessionId=cmdsua4sg0016sbrvnmrb8wlg 200 in 24ms
üîç Persona Update API: Processing 1 messages for session cmdsua4sg0016sbrvnmrb8wlg
üîç Smart Persona Agent: Processing 1 messages for session cmdsua4sg0016sbrvnmrb8wlg
üîç Smart Persona Agent: Extracting persona from messages
üîç Smart Persona Agent: Processing 7 interests
üîç Calling Qloo Entity Search API with parameters: { query: 'Wellness', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 734 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Wellness', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Calling Qloo Entity Search API with parameters: { query: 'Meditation', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 344 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Meditation', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Calling Qloo Entity Search API with parameters: { query: 'Holistic living', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 314 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Holistic living', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Calling Qloo Entity Search API with parameters: { query: 'Yoga', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 470 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Yoga', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Calling Qloo Entity Search API with parameters: { query: 'Organic food', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 554 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Organic food', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Calling Qloo Entity Search API with parameters: { query: 'Mindfulness practices', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 363 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Mindfulness practices', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Calling Qloo Entity Search API with parameters: { query: 'Mental health', limit: 2, targetAPI: 'GETENTITY' }
‚ö†Ô∏è No sessionId provided, skipping API call logging
‚úÖ Entity Search API response received in 510 ms
üîç Calling Qloo Tags API with parameters: { tagType: 'all', query: 'Mental health', limit: 2 }
‚ùå Tags API call failed: Error: Qloo API error: 404 Not Found - {"error":{"code":404,"message":"The requested resource could not be found.","reason":"Not Found"}}
    at getQlooTags (src/lib/qloo/api.ts:744:12)
    at async SmartPersonaAgent.resolveInterestsToQloo (src/lib/agents/smart-persona-agent.ts:214:30)
    at async SmartPersonaAgent.processChatMessages (src/lib/agents/smart-persona-agent.ts:332:27)
    at async POST (src/app/api/persona/update/route.ts:22:4)
  742 |     
  743 |     if (!response.ok) {
> 744 |       throw new Error(`Qloo API error: ${response.status} ${response.statusText} - ${JSON.stringify(data)}`);
      |            ^
  745 |     }
  746 |
  747 |     console.log('‚úÖ Tags API response received');
üîç Smart Persona Agent: Updating persona with 7 interests, 7 QLOO entities
prisma:query SELECT 1
prisma:query UPDATE `main`.`personas` SET `name` = ?, `location` = ?, `gender` = ?, `demographics` = ?, `updatedAt` = ? WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`personal_interests` (`id`, `sessionId`, `category`, `name`, `entityId`, `confidence`, `source`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `category` AS `category`, `name` AS `name`, `entityId` AS `entityId`, `confidence` AS `confidence`, `source` AS `source`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`audience_characteristics` (`id`, `sessionId`, `audienceType`, `audienceId`, `name`, `confidence`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `audienceType` AS `audienceType`, `audienceId` AS `audienceId`, `name` AS `name`, `confidence` AS `confidence`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`audience_characteristics` (`id`, `sessionId`, `audienceType`, `audienceId`, `name`, `confidence`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `audienceType` AS `audienceType`, `audienceId` AS `audienceId`, `name` AS `name`, `confidence` AS `confidence`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
prisma:query INSERT INTO `main`.`audience_characteristics` (`id`, `sessionId`, `audienceType`, `audienceId`, `name`, `confidence`, `metadata`, `createdAt`) VALUES (?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `audienceType` AS `audienceType`, `audienceId` AS `audienceId`, `name` AS `name`, `confidence` AS `confidence`, `metadata` AS `metadata`, `createdAt` AS `createdAt`
‚úÖ Smart Persona Agent updated persona for session cmdsua4sg0016sbrvnmrb8wlg
üìä Extracted: 7 interests, 7 QLOO entities
üîç getPersona called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` = ? ORDER BY `main`.`audience_characteristics`.`createdAt` DESC LIMIT ? OFFSET ?
 POST /api/persona/update 200 in 9422ms
üîç Persona API called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
üîç getPersona called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
 GET /api/persona?sessionId=cmdsua4sg0016sbrvnmrb8wlg 200 in 22ms
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
üöÄ POST /api/chat - Starting request processing
‚úÖ Configuration validation passed
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`sessionId`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`sessionId`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`source` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
üìù Using existing chat session: cmdsua4sg0016sbrvnmrb8wlg
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Starting agent processing with timeout...
üéØ Setting session ID in agents: cmdsua4sg0016sbrvnmrb8wlg
üîç getPersona called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
üîç getPersona called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîß Step: query-analysis { query: 'recomend me a pizza place', status: 'starting' }
üéØ Using rule-based intent analysis for: recomend me a pizza place
üéØ Rule-based analysis: {
  query: 'recomend me a pizza place',
  hasQlooKeywords: false,
  hasGeneralKeywords: false,
  hasHistoryKeywords: false,
  qlooKeywordsFound: [],
  historyKeywordsFound: []
}
üéØ Intent analysis result: { shouldUseQloo: false, intent: 'general', confidence: 0.9 }
üîß Step: query-analysis {
  query: 'recomend me a pizza place',
  status: 'completed',
  intent: { shouldUseQloo: false, intent: 'general', confidence: 0.9 },
  shouldUseQloo: false
}
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
Failed to parse interest extraction JSON: SyntaxError: Unterminated string in JSON at position 15 (line 3 column 10)
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:200:40)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async MainAgent.processQuery (src/lib/agents/main-agent.ts:131:37)
    at async POST (src/app/api/chat/route.ts:128:21)
  198 |       try {
  199 |         // First try to parse as-is
> 200 |         const extractedInterests = JSON.parse(jsonText);
      |                                        ^
  201 |         return extractedInterests;
  202 |       } catch (parseError) {
  203 |         console.error('Failed to parse interest extraction JSON:', parseError);
Raw response: ```json
[
  {
    "name
Failed to fix JSON parsing: SyntaxError: Unterminated string in JSON at position 17 (line 3 column 12)
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:223:42)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async MainAgent.processQuery (src/lib/agents/main-agent.ts:131:37)
    at async POST (src/app/api/chat/route.ts:128:21)
  221 |           }
  222 |           
> 223 |           const extractedInterests = JSON.parse(jsonText);
      |                                          ^
  224 |           console.log('‚úÖ Fixed JSON parsing successfully');
  225 |           return extractedInterests;
  226 |         } catch (secondParseError) {
Attempted to fix JSON: [
  {
    "name]}
‚ÑπÔ∏è No new interests to store
üéØ Extracted 0 interests from conversation
üéØ Routing to response generator. shouldUseQloo: false intent: general
üéØ Taking general response path
üîß Step: general-response { reason: 'Not a Qloo-related query' }
‚úÖ Agent processing completed
prisma:query SELECT 1
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
 POST /api/chat 200 in 7086ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsua4sg0016sbrvnmrb8wlg 200 in 23ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query SELECT 1
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 22ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
üöÄ POST /api/chat - Starting request processing
‚úÖ Configuration validation passed
prisma:query SELECT 1
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`sessionId`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`sessionId`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`source` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
üìù Using existing chat session: cmdsua4sg0016sbrvnmrb8wlg
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Starting agent processing with timeout...
üéØ Setting session ID in agents: cmdsua4sg0016sbrvnmrb8wlg
üîç getPersona called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
üîç getPersona called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîß Step: query-analysis { query: 'hi!', status: 'starting' }
üéØ Using rule-based intent analysis for: hi!
üéØ Rule-based analysis: {
  query: 'hi!',
  hasQlooKeywords: false,
  hasGeneralKeywords: true,
  hasHistoryKeywords: false,
  qlooKeywordsFound: [],
  historyKeywordsFound: []
}
üéØ Intent analysis result: { shouldUseQloo: false, intent: 'general', confidence: 0.9 }
üîß Step: query-analysis {
  query: 'hi!',
  status: 'completed',
  intent: { shouldUseQloo: false, intent: 'general', confidence: 0.9 },
  shouldUseQloo: false
}
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
Failed to parse interest extraction JSON: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:200:40)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async MainAgent.processQuery (src/lib/agents/main-agent.ts:131:37)
    at async POST (src/app/api/chat/route.ts:128:21)
  198 |       try {
  199 |         // First try to parse as-is
> 200 |         const extractedInterests = JSON.parse(jsonText);
      |                                        ^
  201 |         return extractedInterests;
  202 |       } catch (parseError) {
  203 |         console.error('Failed to parse interest extraction JSON:', parseError);
Raw response: 
Failed to fix JSON parsing: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:223:42)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async MainAgent.processQuery (src/lib/agents/main-agent.ts:131:37)
    at async POST (src/app/api/chat/route.ts:128:21)
  221 |           }
  222 |           
> 223 |           const extractedInterests = JSON.parse(jsonText);
      |                                          ^
  224 |           console.log('‚úÖ Fixed JSON parsing successfully');
  225 |           return extractedInterests;
  226 |         } catch (secondParseError) {
Attempted to fix JSON: 
‚ÑπÔ∏è No new interests to store
üéØ Extracted 0 interests from conversation
üéØ Routing to response generator. shouldUseQloo: false intent: general
üéØ Taking general response path
üîß Step: general-response { reason: 'Not a Qloo-related query' }
‚úÖ Agent processing completed
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
 POST /api/chat 200 in 6696ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsua4sg0016sbrvnmrb8wlg 200 in 23ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
 ‚úì Compiled / in 49ms
 GET / 200 in 173ms
 GET / 200 in 134ms
 GET / 200 in 77ms
 ‚úì Compiled in 47ms
 ‚ö† Fast Refresh had to perform a full reload when ./src/app/page.tsx changed. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 ‚úì Compiled in 159ms
 GET / 200 in 168ms
 GET / 200 in 118ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 274ms
 ‚úì Compiled in 102ms
 ‚úì Compiled in 129ms
 ‚úì Compiled in 148ms
 ‚úì Compiled /create-persona in 235ms
 GET /create-persona 200 in 276ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query SELECT 1
prisma:query INSERT INTO `main`.`chat_sessions` (`id`, `createdAt`, `updatedAt`, `debugMode`) VALUES (?,?,?,?) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
üéØ Creating persona with data: {
  name: 'Mizo',
  age: '44',
  city: 'Krakow',
  bio: 'A creative professional who appreciates art, design, and culture. Loves attending concerts, visiting museums, and exploring trendy neighborhoods.'
}
üîç createPersona called with sessionId: cmdsuhkob0023sbrv5ytplhy3
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
üîç Creating persona...
prisma:query INSERT INTO `main`.`personas` (`id`, `sessionId`, `name`, `location`, `demographics`, `confidence`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
üéØ Processing persona data through chat: Hi, I'm Mizo, I'm 44 years old and I live in Krakow. A creative professional who appreciates art, design, and culture. Loves attending concerts, visiting museums, and exploring trendy neighborhoods.
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Processing persona data directly...
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
Failed to parse interest extraction JSON: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:200:40)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async POST (src/app/api/sessions/route.ts:87:41)
  198 |       try {
  199 |         // First try to parse as-is
> 200 |         const extractedInterests = JSON.parse(jsonText);
      |                                        ^
  201 |         return extractedInterests;
  202 |       } catch (parseError) {
  203 |         console.error('Failed to parse interest extraction JSON:', parseError);
Raw response: 
Failed to fix JSON parsing: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:223:42)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async POST (src/app/api/sessions/route.ts:87:41)
  221 |           }
  222 |           
> 223 |           const extractedInterests = JSON.parse(jsonText);
      |                                          ^
  224 |           console.log('‚úÖ Fixed JSON parsing successfully');
  225 |           return extractedInterests;
  226 |         } catch (secondParseError) {
Attempted to fix JSON: 
‚ÑπÔ∏è No new interests to store
üéØ Extracted interests from persona data: 0
prisma:query UPDATE `main`.`personas` SET `confidence` = ?, `updatedAt` = ? WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
‚úÖ Persona confidence updated to: 0.5
‚úÖ Persona data processed through chat successfully
‚úÖ Persona created successfully
 POST /api/sessions 200 in 4285ms
 GET /?sessionId=cmdsuhkob0023sbrv5ytplhy3 200 in 147ms
 GET /api/token-usage 200 in 69ms
prisma:query SELECT `main`.`global_token_usage`.`id`, `main`.`global_token_usage`.`totalPromptTokens`, `main`.`global_token_usage`.`totalCompletionTokens`, `main`.`global_token_usage`.`totalTokens`, `main`.`global_token_usage`.`sessionTokens`, `main`.`global_token_usage`.`lastUpdated`, `main`.`global_token_usage`.`costEstimate` FROM `main`.`global_token_usage` WHERE `main`.`global_token_usage`.`id` IN (?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsuhkob0023sbrv5ytplhy3 200 in 103ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 116ms
 GET /api/token-usage 200 in 75ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsuhkob0023sbrv5ytplhy3 200 in 36ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 37ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
 GET /create-persona 200 in 76ms
 GET / 200 in 34ms
 GET /create-persona 200 in 27ms
 GET / 200 in 229ms
 GET /create-persona 200 in 126ms
 GET / 200 in 27ms
 ‚úì Compiled in 138ms
 ‚úì Compiled in 188ms
 ‚úì Compiled in 79ms
prisma:query SELECT 1
prisma:query INSERT INTO `main`.`chat_sessions` (`id`, `createdAt`, `updatedAt`, `debugMode`) VALUES (?,?,?,?) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
üéØ Creating persona with data: {
  name: 'Guest',
  age: '25',
  city: 'Unknown',
  bio: 'Guest user who skipped persona creation'
}
üîç createPersona called with sessionId: cmdsuxzk60028sbrvlp139lsd
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
üîç Creating persona...
prisma:query INSERT INTO `main`.`personas` (`id`, `sessionId`, `name`, `location`, `demographics`, `confidence`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
üéØ Processing persona data through chat: Hi, I'm Guest, I'm 25 years old and I live in Unknown. Guest user who skipped persona creation
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Processing persona data directly...
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query INSERT INTO `main`.`chat_sessions` (`id`, `createdAt`, `updatedAt`, `debugMode`) VALUES (?,?,?,?) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
üéØ Creating persona with data: {
  name: 'Guest',
  age: '25',
  city: 'Unknown',
  bio: 'Guest user who skipped persona creation'
}
üîç createPersona called with sessionId: cmdsuy08w002dsbrv6hnsc6ct
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
üîç Creating persona...
prisma:query INSERT INTO `main`.`personas` (`id`, `sessionId`, `name`, `location`, `demographics`, `confidence`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
üéØ Processing persona data through chat: Hi, I'm Guest, I'm 25 years old and I live in Unknown. Guest user who skipped persona creation
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Processing persona data directly...
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query INSERT INTO `main`.`chat_sessions` (`id`, `createdAt`, `updatedAt`, `debugMode`) VALUES (?,?,?,?) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
üéØ Creating persona with data: {
  name: 'Guest',
  age: '25',
  city: 'Unknown',
  bio: 'Guest user who skipped persona creation'
}
üîç createPersona called with sessionId: cmdsuy0r2002isbrvokcpg4gf
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
üîç Creating persona...
prisma:query INSERT INTO `main`.`personas` (`id`, `sessionId`, `name`, `location`, `demographics`, `confidence`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
üéØ Processing persona data through chat: Hi, I'm Guest, I'm 25 years old and I live in Unknown. Guest user who skipped persona creation
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Processing persona data directly...
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
‚ÑπÔ∏è No new interests to store
üéØ Extracted interests from persona data: 0
prisma:query UPDATE `main`.`personas` SET `confidence` = ?, `updatedAt` = ? WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
‚úÖ Persona confidence updated to: 0.5
‚úÖ Persona data processed through chat successfully
‚úÖ Persona created successfully
 POST /api/sessions 200 in 1108ms
‚ÑπÔ∏è No new interests to store
üéØ Extracted interests from persona data: 0
 GET /?sessionId=cmdsuy08w002dsbrv6hnsc6ct 200 in 146ms
‚úÖ Persona confidence updated to: 0.5
‚úÖ Persona data processed through chat successfully
‚úÖ Persona created successfully
 POST /api/sessions 200 in 2168ms
prisma:query UPDATE `main`.`personas` SET `confidence` = ?, `updatedAt` = ? WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
 GET /?sessionId=cmdsuxzk60028sbrvlp139lsd 200 in 87ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsuxzk60028sbrvlp139lsd 200 in 39ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?,?,?,?,?) LIMIT ? OFFSET ?
 GET /api/token-usage 200 in 80ms
 GET /api/sessions 200 in 80ms
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`global_token_usage`.`id`, `main`.`global_token_usage`.`totalPromptTokens`, `main`.`global_token_usage`.`totalCompletionTokens`, `main`.`global_token_usage`.`totalTokens`, `main`.`global_token_usage`.`sessionTokens`, `main`.`global_token_usage`.`lastUpdated`, `main`.`global_token_usage`.`costEstimate` FROM `main`.`global_token_usage` WHERE (`main`.`global_token_usage`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/token-usage 200 in 62ms
 GET /api/sessions 200 in 63ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsuxzk60028sbrvlp139lsd 200 in 69ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
‚ÑπÔ∏è No new interests to store
üéØ Extracted interests from persona data: 0
prisma:query UPDATE `main`.`personas` SET `confidence` = ?, `updatedAt` = ? WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
‚úÖ Persona confidence updated to: 0.5
‚úÖ Persona data processed through chat successfully
‚úÖ Persona created successfully
 POST /api/sessions 200 in 1500ms
 GET /?sessionId=cmdsuy0r2002isbrvokcpg4gf 200 in 28ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?,?,?,?,?) LIMIT ? OFFSET ?
 GET /api/sessions 200 in 29ms
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsuy0r2002isbrvokcpg4gf 200 in 30ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query DELETE FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
 DELETE /api/sessions/cmdsuy0r2002isbrvokcpg4gf 200 in 29ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 24ms
 GET / 200 in 142ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query INSERT INTO `main`.`chat_sessions` (`id`, `createdAt`, `updatedAt`, `debugMode`) VALUES (?,?,?,?) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
üéØ Creating persona with data: {
  name: 'Guest',
  age: '25',
  city: 'Unknown',
  bio: 'Guest user who skipped persona creation'
}
üîç createPersona called with sessionId: cmdsuy5sq002nsbrvw5tv5p6l
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
üîç Creating persona...
prisma:query INSERT INTO `main`.`personas` (`id`, `sessionId`, `name`, `location`, `demographics`, `confidence`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
üéØ Processing persona data through chat: Hi, I'm Guest, I'm 25 years old and I live in Unknown. Guest user who skipped persona creation
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Processing persona data directly...
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
‚ÑπÔ∏è No new interests to store
üéØ Extracted interests from persona data: 0
prisma:query UPDATE `main`.`personas` SET `confidence` = ?, `updatedAt` = ? WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
‚úÖ Persona confidence updated to: 0.5
‚úÖ Persona data processed through chat successfully
‚úÖ Persona created successfully
 POST /api/sessions 200 in 1170ms
 GET /?sessionId=cmdsuy5sq002nsbrvw5tv5p6l 200 in 31ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?,?,?,?,?) LIMIT ? OFFSET ?
 GET /api/sessions 200 in 36ms
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/token-usage 200 in 42ms
 GET /api/sessions/cmdsuy5sq002nsbrvw5tv5p6l 200 in 42ms
 GET /api/token-usage 200 in 38ms
 GET /api/sessions 200 in 45ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsuy5sq002nsbrvw5tv5p6l 200 in 45ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsmslld008ssbet20cahyje 200 in 31ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query SELECT 1
prisma:query DELETE FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
 DELETE /api/sessions/cmdsuy5sq002nsbrvw5tv5p6l 200 in 36ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 39ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query DELETE FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
 DELETE /api/sessions/cmdsuy08w002dsbrv6hnsc6ct 200 in 26ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 25ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query DELETE FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
 DELETE /api/sessions/cmdsuxzk60028sbrvlp139lsd 200 in 22ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 18ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query DELETE FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
 DELETE /api/sessions/cmdsuhkob0023sbrv5ytplhy3 200 in 23ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 24ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query DELETE FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
 DELETE /api/sessions/cmdsmslld008ssbet20cahyje 200 in 42ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 21ms
 GET / 200 in 99ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query INSERT INTO `main`.`chat_sessions` (`id`, `createdAt`, `updatedAt`, `debugMode`) VALUES (?,?,?,?) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
üéØ Creating persona with data: {
  name: 'Guest',
  age: '25',
  city: 'Unknown',
  bio: 'Guest user who skipped persona creation'
}
üîç createPersona called with sessionId: cmdsuynjz002ssbrvrzrxj8u2
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
üîç Creating persona...
prisma:query INSERT INTO `main`.`personas` (`id`, `sessionId`, `name`, `location`, `demographics`, `confidence`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
üéØ Processing persona data through chat: Hi, I'm Guest, I'm 25 years old and I live in Unknown. Guest user who skipped persona creation
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Processing persona data directly...
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
‚ÑπÔ∏è No new interests to store
üéØ Extracted interests from persona data: 0
prisma:query SELECT 1
prisma:query UPDATE `main`.`personas` SET `confidence` = ?, `updatedAt` = ? WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
‚úÖ Persona confidence updated to: 0.5
‚úÖ Persona data processed through chat successfully
‚úÖ Persona created successfully
 POST /api/sessions 200 in 1087ms
 GET /?sessionId=cmdsuynjz002ssbrvrzrxj8u2 200 in 32ms
 GET /api/token-usage 200 in 36ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsuynjz002ssbrvrzrxj8u2 200 in 44ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 47ms
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/token-usage 200 in 55ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 45ms
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsuynjz002ssbrvrzrxj8u2 200 in 46ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsgvfni0006sb7gyo6i33o2 200 in 62ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query DELETE FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
 DELETE /api/sessions/cmdsuynjz002ssbrvrzrxj8u2 200 in 21ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 25ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
üöÄ POST /api/chat - Starting request processing
‚úÖ Configuration validation passed
prisma:query SELECT 1
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`sessionId`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`sessionId`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`source` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
üìù Using existing chat session: cmdsgvfni0006sb7gyo6i33o2
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Starting agent processing with timeout...
üéØ Setting session ID in agents: cmdsgvfni0006sb7gyo6i33o2
üîç getPersona called with sessionId: cmdsgvfni0006sb7gyo6i33o2
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
üîç getPersona called with sessionId: cmdsgvfni0006sb7gyo6i33o2
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîß Step: query-analysis { query: 'hi!', status: 'starting' }
üéØ Using rule-based intent analysis for: hi!
üéØ Rule-based analysis: {
  query: 'hi!',
  hasQlooKeywords: false,
  hasGeneralKeywords: true,
  hasHistoryKeywords: false,
  qlooKeywordsFound: [],
  historyKeywordsFound: []
}
üéØ Intent analysis result: { shouldUseQloo: false, intent: 'general', confidence: 0.9 }
üîß Step: query-analysis {
  query: 'hi!',
  status: 'completed',
  intent: { shouldUseQloo: false, intent: 'general', confidence: 0.9 },
  shouldUseQloo: false
}
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
Failed to parse interest extraction JSON: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:200:40)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async MainAgent.processQuery (src/lib/agents/main-agent.ts:131:37)
    at async POST (src/app/api/chat/route.ts:128:21)
  198 |       try {
  199 |         // First try to parse as-is
> 200 |         const extractedInterests = JSON.parse(jsonText);
      |                                        ^
  201 |         return extractedInterests;
  202 |       } catch (parseError) {
  203 |         console.error('Failed to parse interest extraction JSON:', parseError);
Raw response: 
Failed to fix JSON parsing: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:223:42)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async MainAgent.processQuery (src/lib/agents/main-agent.ts:131:37)
    at async POST (src/app/api/chat/route.ts:128:21)
  221 |           }
  222 |           
> 223 |           const extractedInterests = JSON.parse(jsonText);
      |                                          ^
  224 |           console.log('‚úÖ Fixed JSON parsing successfully');
  225 |           return extractedInterests;
  226 |         } catch (secondParseError) {
Attempted to fix JSON: 
‚ÑπÔ∏è No new interests to store
üéØ Extracted 0 interests from conversation
üéØ Routing to response generator. shouldUseQloo: false intent: general
üéØ Taking general response path
üîß Step: general-response { reason: 'Not a Qloo-related query' }
‚úÖ Agent processing completed
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
 POST /api/chat 200 in 6933ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsgvfni0006sb7gyo6i33o2 200 in 68ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
 ‚úì Compiled in 208ms
prisma:query SELECT 1
üîç Persona API called with sessionId: cmdsgvfni0006sb7gyo6i33o2
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdsgvfni0006sb7gyo6i33o2
üîç getPersona called with sessionId: cmdsgvfni0006sb7gyo6i33o2
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` = ? ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
prisma:query SELECT 1
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` = ? ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/qloo-responses?sessionId=cmdsgvfni0006sb7gyo6i33o2 200 in 138ms
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/persona?sessionId=cmdsgvfni0006sb7gyo6i33o2 200 in 142ms
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
üîç Persona API called with sessionId: cmdsgvfni0006sb7gyo6i33o2
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdsgvfni0006sb7gyo6i33o2
üîç getPersona called with sessionId: cmdsgvfni0006sb7gyo6i33o2
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` = ? ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/persona?sessionId=cmdsgvfni0006sb7gyo6i33o2 200 in 46ms
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` = ? ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/qloo-responses?sessionId=cmdsgvfni0006sb7gyo6i33o2 200 in 64ms
 ‚úì Compiled in 80ms
 GET /create-persona 200 in 86ms
 GET /?sessionId=cmdsuynjz002ssbrvrzrxj8u2 200 in 285ms
 GET /api/token-usage 200 in 38ms
prisma:query SELECT `main`.`global_token_usage`.`id`, `main`.`global_token_usage`.`totalPromptTokens`, `main`.`global_token_usage`.`totalCompletionTokens`, `main`.`global_token_usage`.`totalTokens`, `main`.`global_token_usage`.`sessionTokens`, `main`.`global_token_usage`.`lastUpdated`, `main`.`global_token_usage`.`costEstimate` FROM `main`.`global_token_usage` WHERE (`main`.`global_token_usage`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/sessions/cmdsuynjz002ssbrvrzrxj8u2 404 in 47ms
 GET /api/sessions 200 in 52ms
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
 GET /?sessionId=cmdsuynjz002ssbrvrzrxj8u2 200 in 213ms
 GET /api/token-usage 200 in 78ms
prisma:query SELECT 1
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
 GET /api/sessions/cmdsuynjz002ssbrvrzrxj8u2 404 in 75ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 90ms
 GET /favicon.ico?favicon.45db1c09.ico 200 in 283ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
 GET / 200 in 82ms
prisma:query SELECT 1
prisma:query INSERT INTO `main`.`chat_sessions` (`id`, `createdAt`, `updatedAt`, `debugMode`) VALUES (?,?,?,?) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
üéØ Creating persona with data: {
  name: 'Guest',
  age: '25',
  city: 'Unknown',
  bio: 'Guest user who skipped persona creation'
}
üîç createPersona called with sessionId: cmdsv1h8w0031sbrvyyt51fsh
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
üîç Creating persona...
prisma:query INSERT INTO `main`.`personas` (`id`, `sessionId`, `name`, `location`, `demographics`, `confidence`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
üéØ Processing persona data through chat: Hi, I'm Guest, I'm 25 years old and I live in Unknown. Guest user who skipped persona creation
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Processing persona data directly...
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query INSERT INTO `main`.`chat_sessions` (`id`, `createdAt`, `updatedAt`, `debugMode`) VALUES (?,?,?,?) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
üéØ Creating persona with data: {
  name: 'Guest',
  age: '25',
  city: 'Unknown',
  bio: 'Guest user who skipped persona creation'
}
üîç createPersona called with sessionId: cmdsv1icp0036sbrvcqzb0w6l
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
üîç Creating persona...
prisma:query INSERT INTO `main`.`personas` (`id`, `sessionId`, `name`, `location`, `demographics`, `confidence`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
üéØ Processing persona data through chat: Hi, I'm Guest, I'm 25 years old and I live in Unknown. Guest user who skipped persona creation
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Processing persona data directly...
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
‚ÑπÔ∏è No new interests to store
üéØ Extracted interests from persona data: 0
prisma:query UPDATE `main`.`personas` SET `confidence` = ?, `updatedAt` = ? WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
‚úÖ Persona confidence updated to: 0.5
‚úÖ Persona data processed through chat successfully
‚úÖ Persona created successfully
 POST /api/sessions 200 in 2010ms
 GET /?sessionId=cmdsv1h8w0031sbrvyyt51fsh 200 in 35ms
 GET /api/token-usage 200 in 41ms
prisma:query SELECT `main`.`global_token_usage`.`id`, `main`.`global_token_usage`.`totalPromptTokens`, `main`.`global_token_usage`.`totalCompletionTokens`, `main`.`global_token_usage`.`totalTokens`, `main`.`global_token_usage`.`sessionTokens`, `main`.`global_token_usage`.`lastUpdated`, `main`.`global_token_usage`.`costEstimate` FROM `main`.`global_token_usage` WHERE (`main`.`global_token_usage`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 54ms
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsv1h8w0031sbrvyyt51fsh 200 in 54ms
 GET /api/token-usage 200 in 58ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 53ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsv1h8w0031sbrvyyt51fsh 200 in 45ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
‚ÑπÔ∏è No new interests to store
üéØ Extracted interests from persona data: 0
prisma:query UPDATE `main`.`personas` SET `confidence` = ?, `updatedAt` = ? WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `name` AS `name`, `location` AS `location`, `gender` AS `gender`, `demographics` AS `demographics`, `confidence` AS `confidence`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
‚úÖ Persona confidence updated to: 0.5
‚úÖ Persona data processed through chat successfully
‚úÖ Persona created successfully
 POST /api/sessions 200 in 1499ms
 GET /?sessionId=cmdsv1icp0036sbrvcqzb0w6l 200 in 31ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 32ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsv1icp0036sbrvcqzb0w6l 200 in 32ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
üöÄ POST /api/chat - Starting request processing
‚úÖ Configuration validation passed
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`sessionId`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`sessionId`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`source` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
üìù Using existing chat session: cmdsv1icp0036sbrvcqzb0w6l
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
üéØ Starting agent processing with timeout...
üéØ Setting session ID in agents: cmdsv1icp0036sbrvcqzb0w6l
üîç getPersona called with sessionId: cmdsv1icp0036sbrvcqzb0w6l
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
üîç getPersona called with sessionId: cmdsv1icp0036sbrvcqzb0w6l
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîß Step: query-analysis { query: 'Recommend me some restaurants', status: 'starting' }
üéØ Using rule-based intent analysis for: Recommend me some restaurants
üéØ Rule-based analysis: {
  query: 'recommend me some restaurants',
  hasQlooKeywords: true,
  hasGeneralKeywords: false,
  hasHistoryKeywords: false,
  qlooKeywordsFound: [ 'recommend', 'restaurant' ],
  historyKeywordsFound: []
}
üéØ Intent analysis result: { shouldUseQloo: true, intent: 'recommendation', confidence: 0.8 }
üîß Step: query-analysis {
  query: 'Recommend me some restaurants',
  status: 'completed',
  intent: { shouldUseQloo: true, intent: 'recommendation', confidence: 0.8 },
  shouldUseQloo: true
}
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
Failed to parse interest extraction JSON: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:200:40)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async MainAgent.processQuery (src/lib/agents/main-agent.ts:131:37)
    at async POST (src/app/api/chat/route.ts:128:21)
  198 |       try {
  199 |         // First try to parse as-is
> 200 |         const extractedInterests = JSON.parse(jsonText);
      |                                        ^
  201 |         return extractedInterests;
  202 |       } catch (parseError) {
  203 |         console.error('Failed to parse interest extraction JSON:', parseError);
Raw response: 
Failed to fix JSON parsing: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:223:42)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async MainAgent.processQuery (src/lib/agents/main-agent.ts:131:37)
    at async POST (src/app/api/chat/route.ts:128:21)
  221 |           }
  222 |           
> 223 |           const extractedInterests = JSON.parse(jsonText);
      |                                          ^
  224 |           console.log('‚úÖ Fixed JSON parsing successfully');
  225 |           return extractedInterests;
  226 |         } catch (secondParseError) {
Attempted to fix JSON: 
‚ÑπÔ∏è No new interests to store
üéØ Extracted 0 interests from conversation
üéØ Routing to response generator. shouldUseQloo: true intent: recommendation
üéØ Taking Qloo path
üéØ generateQlooResponse called with: {
  userQuery: 'Recommend me some restaurants',
  intent: { shouldUseQloo: true, intent: 'recommendation', confidence: 0.8 }
}
üîç getPersona called with sessionId: cmdsv1icp0036sbrvcqzb0w6l
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT 1
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üìç Found persona location: Unknown
üìç Using persona location: { city: 'Unknown', country: 'United States' }
üîç Using Insights API with entity resolution and persona workflow
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
Failed to parse interest extraction JSON: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:200:40)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async QlooAgent.extractParameters (src/lib/agents/qloo-agent.ts:86:35)
    at async MainAgent.generateQlooResponse (src/lib/agents/main-agent.ts:321:31)
    at async MainAgent.processQuery (src/lib/agents/main-agent.ts:153:15)
    at async POST (src/app/api/chat/route.ts:128:21)
  198 |       try {
  199 |         // First try to parse as-is
> 200 |         const extractedInterests = JSON.parse(jsonText);
      |                                        ^
  201 |         return extractedInterests;
  202 |       } catch (parseError) {
  203 |         console.error('Failed to parse interest extraction JSON:', parseError);
Raw response: 
Failed to fix JSON parsing: SyntaxError: Unexpected end of JSON input
    at JSON.parse (<anonymous>)
    at SmartInterestExtractor.extractFromConversation (src/lib/agents/smart-interest-extractor.ts:223:42)
    at async PersonaManager.extractInterestsFromConversation (src/lib/agents/persona-manager.ts:115:33)
    at async QlooAgent.extractParameters (src/lib/agents/qloo-agent.ts:86:35)
    at async MainAgent.generateQlooResponse (src/lib/agents/main-agent.ts:321:31)
    at async MainAgent.processQuery (src/lib/agents/main-agent.ts:153:15)
    at async POST (src/app/api/chat/route.ts:128:21)
  221 |           }
  222 |           
> 223 |           const extractedInterests = JSON.parse(jsonText);
      |                                          ^
  224 |           console.log('‚úÖ Fixed JSON parsing successfully');
  225 |           return extractedInterests;
  226 |         } catch (secondParseError) {
Attempted to fix JSON: 
‚ÑπÔ∏è No new interests to store
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
üéØ Generating signals from interests: []
üéØ Target entity type: urn:entity:place
‚ÑπÔ∏è No interests found, returning empty signals
üéØ Persona signals for recommendations: { entitySignals: [], audienceSignals: [], tagSignals: [] }
‚ö†Ô∏è Parameter evaluation failed: AI parsing error, using fallback evaluation
‚ö†Ô∏è Parameter evaluation failed: AI parsing error, using fallback evaluation
‚ö†Ô∏è Parameter evaluation failed: AI parsing error, using fallback evaluation
‚ö†Ô∏è Parameter evaluation failed: AI parsing error, using fallback evaluation
‚ö†Ô∏è Parameter evaluation failed: AI parsing error, using fallback evaluation
‚ö†Ô∏è Parameter evaluation failed: AI parsing error, using fallback evaluation
üéØ Parameter extraction result: {
  parameters: {
    query: 'Recommend me some restaurants',
    entityType: 'urn:entity:place',
    location: { city: 'Unknown', country: 'United States' },
    targetAPI: 'GETINSIGHTS',
    limit: 3,
    explainability: true,
    filterTags: undefined,
    parsingLevel: 'summary'
  },
  confidence: 0.8,
  reasoning: 'Enhanced with 0 persona signals and 0 new interests',
  extractedFields: [
    'query',
    'entityType',
    'location',
    'targetAPI',
    'limit',
    'explainability',
    'filterTags',
    'parsingLevel'
  ]
}
üéØ About to generate persona signals for entity type: urn:entity:place
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
üéØ Generating signals from interests: []
üéØ Target entity type: urn:entity:place
‚ÑπÔ∏è No interests found, returning empty signals
üéØ Using persona signals for recommendations: { entitySignals: [], audienceSignals: [], tagSignals: [] }
üéØ Entity type for signals: urn:entity:place
‚ö†Ô∏è No persona signals available, using entity search
üîç Calling Qloo Entity Search API with parameters: {
  query: 'Recommend me some restaurants',
  entityType: 'urn:entity:place',
  location: { city: 'Unknown', country: 'United States' },
  targetAPI: 'GETINSIGHTS',
  limit: 3,
  explainability: true,
  filterTags: undefined,
  parsingLevel: 'summary'
}
üîç Parser debug: {
  hasResponse: true,
  hasResults: true,
  hasData: false,
  hasDataResults: false,
  hasDataEntities: false,
  isResultsArray: false,
  hasResultsEntities: false,
  isResultsArrayDirect: true,
  entityCount: 3,
  responseKeys: [ 'results' ],
  dataKeys: [],
  resultsKeys: [ '0', '1', '2' ]
}
üîç First entity structure: {
  keys: [
    'name',
    'entity_id',
    'types',
    'properties',
    'popularity',
    'location',
    'tags',
    'disambiguation'
  ],
  type: undefined,
  entity_type: undefined,
  entityType: undefined,
  hasProperties: true,
  propertiesKeys: [
    'akas',
    'address',
    'business_rating',
    'external',
    'geocode',
    'hours',
    'image',
    'is_closed',
    'phone',
    'specialty_dishes',
    'good_for'
  ],
  properties: {
    akas: [ [Object] ],
    address: '4th floor, fortune Island Galaxy Cir, Pal Gam Surat, Gujarat 394510 India',
    business_rating: 4.2,
    external: {},
    geocode: {
      city: 'Surat',
      admin1_region: 'Chorasi Taluka',
      admin2_region: 'Gujarat',
      country_code: 'IN',
      country: 'India'
    },
    hours: {
      Monday: [Array],
      Tuesday: [Array],
      Wednesday: [Array],
      Thursday: [Array],
      Friday: [Array],
      Saturday: [Array],
      Sunday: [Array]
    },
    image: {
      url: 'https://images.qloo.com/i/79308A4D-051A-4443-B0F1-3913E227C956-420x-auto.jpg'
    },
    is_closed: false,
    phone: '+919409988988',
    specialty_dishes: [ [Object], [Object], [Object] ],
    good_for: [ [Object] ]
  }
}
üîç Parser result: {
  originalCount: 3,
  parsedCount: 3,
  finalEntityCount: 3,
  responseSize: 31013,
  parsingLevel: 'tiny',
  entityNames: [
    'The Galaxy Revolving Restaurant - Restaurants in Surat | Banquet Near Me | Restaurant Near Me | Best Restaurants in Surat',
    '99 Restaurants',
    '99 Restaurants'
  ]
}
üìè Medium response detected, using tiny parsing: 31013 bytes
üîç Attempting to log API call for session: cmdsv1icp0036sbrvcqzb0w6l
prisma:query INSERT INTO `main`.`api_calls` (`id`, `sessionId`, `endpoint`, `method`, `parameters`, `response`, `status`, `duration`, `timestamp`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `endpoint` AS `endpoint`, `method` AS `method`, `parameters` AS `parameters`, `response` AS `response`, `status` AS `status`, `duration` AS `duration`, `timestamp` AS `timestamp`, `error` AS `error`
üíæ Logged complete raw Qloo response to database
‚úÖ Entity Search API response received in 2862 ms
üíæ Storing 3 entities from entity-search
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE (`main`.`entities`.`sessionId` = ? AND `main`.`entities`.`qlooId` = ?) LIMIT ? OFFSET ?
prisma:query INSERT INTO `main`.`entities` (`id`, `sessionId`, `qlooId`, `name`, `type`, `metadata`, `confidence`, `source`, `timestamp`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `qlooId` AS `qlooId`, `name` AS `name`, `type` AS `type`, `subtype` AS `subtype`, `description` AS `description`, `metadata` AS `metadata`, `tags` AS `tags`, `location` AS `location`, `confidence` AS `confidence`, `source` AS `source`, `timestamp` AS `timestamp`
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE (`main`.`entities`.`sessionId` = ? AND `main`.`entities`.`qlooId` = ?) LIMIT ? OFFSET ?
prisma:query INSERT INTO `main`.`entities` (`id`, `sessionId`, `qlooId`, `name`, `type`, `description`, `metadata`, `confidence`, `source`, `timestamp`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `qlooId` AS `qlooId`, `name` AS `name`, `type` AS `type`, `subtype` AS `subtype`, `description` AS `description`, `metadata` AS `metadata`, `tags` AS `tags`, `location` AS `location`, `confidence` AS `confidence`, `source` AS `source`, `timestamp` AS `timestamp`
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE (`main`.`entities`.`sessionId` = ? AND `main`.`entities`.`qlooId` = ?) LIMIT ? OFFSET ?
prisma:query INSERT INTO `main`.`entities` (`id`, `sessionId`, `qlooId`, `name`, `type`, `description`, `metadata`, `confidence`, `source`, `timestamp`) VALUES (?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `qlooId` AS `qlooId`, `name` AS `name`, `type` AS `type`, `subtype` AS `subtype`, `description` AS `description`, `metadata` AS `metadata`, `tags` AS `tags`, `location` AS `location`, `confidence` AS `confidence`, `source` AS `source`, `timestamp` AS `timestamp`
‚úÖ Stored 3 entities for session cmdsv1icp0036sbrvcqzb0w6l
‚úÖ Stored 3 entities from search
‚úÖ Entity search successful
üîç About to parse Qloo response with structure: {
  hasData: true,
  dataKeys: [ 'entities', 'metadata' ],
  hasResults: false,
  resultsKeys: [],
  hasEntities: false,
  entityCount: 0
}
üîç Raw API response keys: [ 'success', 'data', 'metadata' ]
üîç API response.data keys: [ 'entities', 'metadata' ]
üîç API response.data.results keys: no results
üîç API response.data.results.entities count: 0
üîç Parser debug: {
  hasResponse: true,
  hasResults: false,
  hasData: true,
  hasDataResults: false,
  hasDataEntities: true,
  isResultsArray: false,
  hasResultsEntities: false,
  isResultsArrayDirect: false,
  entityCount: 3,
  responseKeys: [ 'success', 'data', 'metadata' ],
  dataKeys: [ 'entities', 'metadata' ],
  resultsKeys: []
}
üîç First entity structure: {
  keys: [
    'id',         'name',
    'type',       'subtype',
    'entityType', 'imageUrl',
    'properties', 'description',
    'score'
  ],
  type: 'urn:entity:place',
  entity_type: undefined,
  entityType: 'urn:entity:place',
  hasProperties: true,
  propertiesKeys: [
    'description',      'address',
    'phone',            'website',
    'rating',           'price_range',
    'cuisine',          'genre',
    'director',         'release_year',
    'runtime',          'cast',
    'filming_location', 'production_companies',
    'release_country',  'short_descriptions',
    'akas',             'business_rating',
    'external',         'geocode',
    'hours',            'image',
    'is_closed',        'specialty_dishes',
    'good_for'
  ],
  properties: {
    description: undefined,
    address: '4th floor, fortune Island Galaxy Cir, Pal Gam Surat, Gujarat 394510 India',
    phone: '+919409988988',
    website: undefined,
    rating: undefined,
    price_range: undefined,
    cuisine: undefined,
    genre: undefined,
    director: undefined,
    release_year: undefined,
    runtime: undefined,
    cast: undefined,
    filming_location: undefined,
    production_companies: undefined,
    release_country: undefined,
    short_descriptions: undefined,
    akas: [ [Object] ],
    business_rating: 4.2,
    external: {},
    geocode: {
      city: 'Surat',
      admin1_region: 'Chorasi Taluka',
      admin2_region: 'Gujarat',
      country_code: 'IN',
      country: 'India'
    },
    hours: {
      Monday: [Array],
      Tuesday: [Array],
      Wednesday: [Array],
      Thursday: [Array],
      Friday: [Array],
      Saturday: [Array],
      Sunday: [Array]
    },
    image: {
      url: 'https://images.qloo.com/i/79308A4D-051A-4443-B0F1-3913E227C956-420x-auto.jpg'
    },
    is_closed: false,
    specialty_dishes: [ [Object], [Object], [Object] ],
    good_for: [ [Object] ]
  }
}
üîç Parser result: {
  originalCount: 3,
  parsedCount: 3,
  finalEntityCount: 3,
  responseSize: 5657,
  parsingLevel: 'summary',
  entityNames: [
    'The Galaxy Revolving Restaurant - Restaurants in Surat | Banquet Near Me | Restaurant Near Me | Best Restaurants in Surat',
    '99 Restaurants',
    '99 Restaurants'
  ]
}
üìä Parsed response structure: {
  entityCount: 3,
  hasEntities: true,
  metadata: {
    parsingLevel: 'summary',
    originalCount: 3,
    parsedCount: 3,
    tokenSavings: 20
  }
}
‚úÖ Parsed entities found: [
  {
    name: 'The Galaxy Revolving Restaurant - Restaurants in Surat | Banquet Near Me | Restaurant Near Me | Best Restaurants in Surat',
    type: 'urn:entity:place'
  },
  { name: '99 Restaurants', type: 'urn:entity:place' },
  { name: '99 Restaurants', type: 'urn:entity:place' }
]
üîç Checking parsed response entities: 3
üîç Raw API response entities: 3
üîç Parsed response structure: {
  hasEntities: true,
  entityCount: 3,
  metadata: {
    parsingLevel: 'summary',
    originalCount: 3,
    parsedCount: 3,
    tokenSavings: 20
  }
}
‚úÖ Found recommendations from Qloo API
üíæ Storing 3 entities from insights-api
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE (`main`.`entities`.`sessionId` = ? AND `main`.`entities`.`qlooId` = ?) LIMIT ? OFFSET ?
prisma:query UPDATE `main`.`entities` SET `name` = ?, `type` = ?, `metadata` = ?, `confidence` = ?, `source` = ?, `timestamp` = ? WHERE (`main`.`entities`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `qlooId` AS `qlooId`, `name` AS `name`, `type` AS `type`, `subtype` AS `subtype`, `description` AS `description`, `metadata` AS `metadata`, `tags` AS `tags`, `location` AS `location`, `confidence` AS `confidence`, `source` AS `source`, `timestamp` AS `timestamp`
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE (`main`.`entities`.`sessionId` = ? AND `main`.`entities`.`qlooId` = ?) LIMIT ? OFFSET ?
prisma:query UPDATE `main`.`entities` SET `name` = ?, `type` = ?, `description` = ?, `metadata` = ?, `confidence` = ?, `source` = ?, `timestamp` = ? WHERE (`main`.`entities`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `qlooId` AS `qlooId`, `name` AS `name`, `type` AS `type`, `subtype` AS `subtype`, `description` AS `description`, `metadata` AS `metadata`, `tags` AS `tags`, `location` AS `location`, `confidence` AS `confidence`, `source` AS `source`, `timestamp` AS `timestamp`
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE (`main`.`entities`.`sessionId` = ? AND `main`.`entities`.`qlooId` = ?) LIMIT ? OFFSET ?
prisma:query UPDATE `main`.`entities` SET `name` = ?, `type` = ?, `description` = ?, `metadata` = ?, `confidence` = ?, `source` = ?, `timestamp` = ? WHERE (`main`.`entities`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `qlooId` AS `qlooId`, `name` AS `name`, `type` AS `type`, `subtype` AS `subtype`, `description` AS `description`, `metadata` AS `metadata`, `tags` AS `tags`, `location` AS `location`, `confidence` AS `confidence`, `source` AS `source`, `timestamp` AS `timestamp`
‚úÖ Stored 3 entities for session cmdsv1icp0036sbrvcqzb0w6l
üíæ Stored full entity data in database
üéØ Storing response metadata with entities: {
  entityCount: 3,
  entityNames: [
    'The Galaxy Revolving Restaurant - Restaurants in Surat | Banquet Near Me | Restaurant Near Me | Best Restaurants in Surat',
    '99 Restaurants',
    '99 Restaurants'
  ],
  intent: 'recommendation',
  source: 'qloo-insights'
}
üéØ Generating personalized response with entities: 3
‚úÖ Agent processing completed
prisma:query INSERT INTO `main`.`messages` (`id`, `sessionId`, `role`, `content`, `timestamp`, `usage`, `metadata`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `sessionId` AS `sessionId`, `role` AS `role`, `content` AS `content`, `timestamp` AS `timestamp`, `usage` AS `usage`, `metadata` AS `metadata`
 POST /api/chat 200 in 16029ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsv1icp0036sbrvcqzb0w6l 200 in 22ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
üîç Persona API called with sessionId: cmdsv1icp0036sbrvcqzb0w6l
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdsv1icp0036sbrvcqzb0w6l
üîç getPersona called with sessionId: cmdsv1icp0036sbrvcqzb0w6l
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT 1
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT 1
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` = ? ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` = ? ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/qloo-responses?sessionId=cmdsv1icp0036sbrvcqzb0w6l 200 in 46ms
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/persona?sessionId=cmdsv1icp0036sbrvcqzb0w6l 200 in 50ms
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
üîç Persona API called with sessionId: cmdsv1icp0036sbrvcqzb0w6l
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdsv1icp0036sbrvcqzb0w6l
üîç getPersona called with sessionId: cmdsv1icp0036sbrvcqzb0w6l
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` = ? ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` = ? ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/qloo-responses?sessionId=cmdsv1icp0036sbrvcqzb0w6l 200 in 30ms
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/persona?sessionId=cmdsv1icp0036sbrvcqzb0w6l 200 in 30ms
prisma:query DELETE FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
 DELETE /api/sessions/cmdsv1icp0036sbrvcqzb0w6l 200 in 27ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 24ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsv1h8w0031sbrvyyt51fsh 200 in 21ms
üîç Persona API called with sessionId: cmdsv1h8w0031sbrvyyt51fsh
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdsv1h8w0031sbrvyyt51fsh
üîç getPersona called with sessionId: cmdsv1h8w0031sbrvyyt51fsh
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` = ? ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` = ? ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/qloo-responses?sessionId=cmdsv1h8w0031sbrvyyt51fsh 200 in 49ms
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/persona?sessionId=cmdsv1h8w0031sbrvyyt51fsh 200 in 53ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
prisma:query DELETE FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`, `personaId` AS `personaId`, `debugMode` AS `debugMode`
 DELETE /api/sessions/cmdsv1h8w0031sbrvyyt51fsh 200 in 31ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode`, COALESCE(`aggr_selection_0_Message`.`_aggr_count_messages`, 0) AS `_aggr_count_messages`, COALESCE(`aggr_selection_1_ApiCall`.`_aggr_count_apiCalls`, 0) AS `_aggr_count_apiCalls`, COALESCE(`aggr_selection_2_TokenUsage`.`_aggr_count_tokenUsage`, 0) AS `_aggr_count_tokenUsage`, COALESCE(`aggr_selection_3_StructuredExtraction`.`_aggr_count_structuredExtractions`, 0) AS `_aggr_count_structuredExtractions` FROM `main`.`chat_sessions` LEFT JOIN (SELECT `main`.`messages`.`sessionId`, COUNT(*) AS `_aggr_count_messages` FROM `main`.`messages` WHERE 1=1 GROUP BY `main`.`messages`.`sessionId`) AS `aggr_selection_0_Message` ON (`main`.`chat_sessions`.`id` = `aggr_selection_0_Message`.`sessionId`) LEFT JOIN (SELECT `main`.`api_calls`.`sessionId`, COUNT(*) AS `_aggr_count_apiCalls` FROM `main`.`api_calls` WHERE 1=1 GROUP BY `main`.`api_calls`.`sessionId`) AS `aggr_selection_1_ApiCall` ON (`main`.`chat_sessions`.`id` = `aggr_selection_1_ApiCall`.`sessionId`) LEFT JOIN (SELECT `main`.`token_usage`.`sessionId`, COUNT(*) AS `_aggr_count_tokenUsage` FROM `main`.`token_usage` WHERE 1=1 GROUP BY `main`.`token_usage`.`sessionId`) AS `aggr_selection_2_TokenUsage` ON (`main`.`chat_sessions`.`id` = `aggr_selection_2_TokenUsage`.`sessionId`) LEFT JOIN (SELECT `main`.`structured_extractions`.`sessionId`, COUNT(*) AS `_aggr_count_structuredExtractions` FROM `main`.`structured_extractions` WHERE 1=1 GROUP BY `main`.`structured_extractions`.`sessionId`) AS `aggr_selection_3_StructuredExtraction` ON (`main`.`chat_sessions`.`id` = `aggr_selection_3_StructuredExtraction`.`sessionId`) WHERE 1=1 ORDER BY `main`.`chat_sessions`.`updatedAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`sessionId` FROM `main`.`personas` WHERE `main`.`personas`.`sessionId` IN (?,?,?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`messages`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`source`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?,?,?,?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions 200 in 23ms
prisma:query SELECT `main`.`chat_sessions`.`id`, `main`.`chat_sessions`.`createdAt`, `main`.`chat_sessions`.`updatedAt`, `main`.`chat_sessions`.`personaId`, `main`.`chat_sessions`.`debugMode` FROM `main`.`chat_sessions` WHERE (`main`.`chat_sessions`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`messages`.`id`, `main`.`messages`.`role`, `main`.`messages`.`content`, `main`.`messages`.`timestamp`, `main`.`messages`.`usage`, `main`.`messages`.`metadata`, `main`.`messages`.`sessionId` FROM `main`.`messages` WHERE `main`.`messages`.`sessionId` IN (?) ORDER BY `main`.`messages`.`timestamp` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error`, `main`.`api_calls`.`sessionId` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` IN (?) ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`token_usage`.`id`, `main`.`token_usage`.`promptTokens`, `main`.`token_usage`.`completionTokens`, `main`.`token_usage`.`totalTokens`, `main`.`token_usage`.`cost`, `main`.`token_usage`.`source`, `main`.`token_usage`.`timestamp`, `main`.`token_usage`.`sessionId` FROM `main`.`token_usage` WHERE `main`.`token_usage`.`sessionId` IN (?) ORDER BY `main`.`token_usage`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`structured_extractions`.`id`, `main`.`structured_extractions`.`query`, `main`.`structured_extractions`.`parameters`, `main`.`structured_extractions`.`confidence`, `main`.`structured_extractions`.`reasoning`, `main`.`structured_extractions`.`extractedFields`, `main`.`structured_extractions`.`timestamp`, `main`.`structured_extractions`.`sessionId` FROM `main`.`structured_extractions` WHERE `main`.`structured_extractions`.`sessionId` IN (?) ORDER BY `main`.`structured_extractions`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp`, `main`.`entities`.`sessionId` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` IN (?) ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/sessions/cmdsua4sg0016sbrvnmrb8wlg 200 in 26ms
prisma:query SELECT `main`.`api_calls`.`id`, `main`.`api_calls`.`sessionId`, `main`.`api_calls`.`endpoint`, `main`.`api_calls`.`method`, `main`.`api_calls`.`parameters`, `main`.`api_calls`.`response`, `main`.`api_calls`.`status`, `main`.`api_calls`.`duration`, `main`.`api_calls`.`timestamp`, `main`.`api_calls`.`error` FROM `main`.`api_calls` WHERE `main`.`api_calls`.`sessionId` = ? ORDER BY `main`.`api_calls`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`entities`.`id`, `main`.`entities`.`sessionId`, `main`.`entities`.`qlooId`, `main`.`entities`.`name`, `main`.`entities`.`type`, `main`.`entities`.`subtype`, `main`.`entities`.`description`, `main`.`entities`.`metadata`, `main`.`entities`.`tags`, `main`.`entities`.`location`, `main`.`entities`.`confidence`, `main`.`entities`.`source`, `main`.`entities`.`timestamp` FROM `main`.`entities` WHERE `main`.`entities`.`sessionId` = ? ORDER BY `main`.`entities`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/qloo-responses?sessionId=cmdsua4sg0016sbrvnmrb8wlg 200 in 46ms
üîç Persona API called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
üîç databaseService exists: true
üîç databaseService.prisma exists: true
üîç Calling getOrCreatePersona...
üîç getOrCreatePersona called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
üîç getPersona called with sessionId: cmdsua4sg0016sbrvnmrb8wlg
üîç this.prisma exists: true
üîç this.prisma.persona exists: true
prisma:query SELECT `main`.`personas`.`id`, `main`.`personas`.`sessionId`, `main`.`personas`.`name`, `main`.`personas`.`location`, `main`.`personas`.`gender`, `main`.`personas`.`demographics`, `main`.`personas`.`confidence`, `main`.`personas`.`createdAt`, `main`.`personas`.`updatedAt` FROM `main`.`personas` WHERE (`main`.`personas`.`sessionId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` IN (?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`audience_characteristics`.`id`, `main`.`audience_characteristics`.`sessionId`, `main`.`audience_characteristics`.`audienceType`, `main`.`audience_characteristics`.`audienceId`, `main`.`audience_characteristics`.`name`, `main`.`audience_characteristics`.`confidence`, `main`.`audience_characteristics`.`metadata`, `main`.`audience_characteristics`.`createdAt` FROM `main`.`audience_characteristics` WHERE `main`.`audience_characteristics`.`sessionId` IN (?) LIMIT ? OFFSET ?
üîç getPersona returned: true
üîç getOrCreatePersona completed, persona: true
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`personal_interests`.`id`, `main`.`personal_interests`.`sessionId`, `main`.`personal_interests`.`category`, `main`.`personal_interests`.`name`, `main`.`personal_interests`.`entityId`, `main`.`personal_interests`.`confidence`, `main`.`personal_interests`.`source`, `main`.`personal_interests`.`metadata`, `main`.`personal_interests`.`createdAt` FROM `main`.`personal_interests` WHERE `main`.`personal_interests`.`sessionId` = ? ORDER BY `main`.`personal_interests`.`createdAt` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
‚ö†Ô∏è Bio generation: Using fallback generator - AI bio generation is disabled
prisma:query SELECT `main`.`recommendation_feedback`.`id`, `main`.`recommendation_feedback`.`sessionId`, `main`.`recommendation_feedback`.`recommendationId`, `main`.`recommendation_feedback`.`recommendationType`, `main`.`recommendation_feedback`.`recommendationName`, `main`.`recommendation_feedback`.`rating`, `main`.`recommendation_feedback`.`feedback`, `main`.`recommendation_feedback`.`comment`, `main`.`recommendation_feedback`.`metadata`, `main`.`recommendation_feedback`.`timestamp` FROM `main`.`recommendation_feedback` WHERE `main`.`recommendation_feedback`.`sessionId` = ? ORDER BY `main`.`recommendation_feedback`.`timestamp` DESC LIMIT ? OFFSET ?
 GET /api/persona?sessionId=cmdsua4sg0016sbrvnmrb8wlg 200 in 54ms
‚úÖ DatabaseService initialized with Prisma client
üîß DatabaseService singleton created
üîß databaseService.prisma exists: true
üîß databaseService.prisma.persona exists: true
